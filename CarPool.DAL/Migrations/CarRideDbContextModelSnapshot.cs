// <auto-generated />
using System;
using CarPool.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarPool.DAL.Migrations
{
    [DbContext(typeof(CarRideDbContext))]
    partial class CarRideDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.3");

            modelBuilder.Entity("CarPool.DAL.Entities.CarEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CarOwnerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SeatCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CarOwnerId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarPool.DAL.Entities.RideEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CarId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EndLocation")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartLocation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("DriverId");

                    b.ToTable("Rides");
                });

            modelBuilder.Entity("CarPool.DAL.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RideEntityUserEntity", b =>
                {
                    b.Property<Guid>("PassengersId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RidesPassengerId")
                        .HasColumnType("TEXT");

                    b.HasKey("PassengersId", "RidesPassengerId");

                    b.HasIndex("RidesPassengerId");

                    b.ToTable("RideEntityUserEntity");
                });

            modelBuilder.Entity("CarPool.DAL.Entities.CarEntity", b =>
                {
                    b.HasOne("CarPool.DAL.Entities.UserEntity", "CarOwner")
                        .WithMany("Cars")
                        .HasForeignKey("CarOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarOwner");
                });

            modelBuilder.Entity("CarPool.DAL.Entities.RideEntity", b =>
                {
                    b.HasOne("CarPool.DAL.Entities.CarEntity", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarPool.DAL.Entities.UserEntity", "Driver")
                        .WithMany("RidesDriver")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("RideEntityUserEntity", b =>
                {
                    b.HasOne("CarPool.DAL.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("PassengersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarPool.DAL.Entities.RideEntity", null)
                        .WithMany()
                        .HasForeignKey("RidesPassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.DAL.Entities.UserEntity", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("RidesDriver");
                });
#pragma warning restore 612, 618
        }
    }
}
